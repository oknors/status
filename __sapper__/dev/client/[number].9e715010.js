import { S as SvelteComponentDev, i as init, s as safe_not_equal, d as dispatch_dev, c as config, v as validate_slots, o as onMount, M as t, m as space, e as element, t as text, N as query_selector_all, g as detach_dev, p as claim_space, a as claim_element, b as children, f as claim_text, h as attr_dev, j as add_location, k as insert_hydration_dev, l as append_hydration_dev, q as group_outros, r as transition_out, u as check_outros, w as transition_in, x as validate_each_argument, y as set_data_dev, L as null_to_empty, n as noop, z as empty, A as destroy_each, B as create_component, C as claim_component, D as mount_component, E as destroy_component } from './client.69e7c0f4.js';
import { c as createOctokit, a as cachedResponse, h as handleError, L as Loading } from './createOctokit.15be5dc3.js';

/* src/components/Incident.svelte generated by Svelte v3.43.2 */

const file = "src/components/Incident.svelte";

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[9] = list[i];
	return child_ctx;
}

// (76:2) {:else}
function create_else_block_1(ctx) {
	let t0_value = /*incident*/ ctx[4].title + "";
	let t0;
	let t1;
	let span;

	let t2_value = (/*incident*/ ctx[4].state === 'closed'
	? config.i18n.incidentFixed
	: config.i18n.incidentOngoing) + "";

	let t2;
	let span_class_value;

	const block = {
		c: function create() {
			t0 = text(t0_value);
			t1 = space();
			span = element("span");
			t2 = text(t2_value);
			this.h();
		},
		l: function claim(nodes) {
			t0 = claim_text(nodes, t0_value);
			t1 = claim_space(nodes);
			span = claim_element(nodes, "SPAN", { class: true });
			var span_nodes = children(span);
			t2 = claim_text(span_nodes, t2_value);
			span_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(span, "class", span_class_value = "" + (null_to_empty(`tag ${/*incident*/ ctx[4].state}`) + " svelte-4o16l6"));
			add_location(span, file, 77, 4, 1615);
		},
		m: function mount(target, anchor) {
			insert_hydration_dev(target, t0, anchor);
			insert_hydration_dev(target, t1, anchor);
			insert_hydration_dev(target, span, anchor);
			append_hydration_dev(span, t2);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*incident*/ 16 && t0_value !== (t0_value = /*incident*/ ctx[4].title + "")) set_data_dev(t0, t0_value);

			if (dirty & /*incident*/ 16 && t2_value !== (t2_value = (/*incident*/ ctx[4].state === 'closed'
			? config.i18n.incidentFixed
			: config.i18n.incidentOngoing) + "")) set_data_dev(t2, t2_value);

			if (dirty & /*incident*/ 16 && span_class_value !== (span_class_value = "" + (null_to_empty(`tag ${/*incident*/ ctx[4].state}`) + " svelte-4o16l6"))) {
				attr_dev(span, "class", span_class_value);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t0);
			if (detaching) detach_dev(t1);
			if (detaching) detach_dev(span);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block_1.name,
		type: "else",
		source: "(76:2) {:else}",
		ctx
	});

	return block;
}

// (74:2) {#if loadingIncident}
function create_if_block_2(ctx) {
	let t_value = config.i18n.incidentDetails + "";
	let t;

	const block = {
		c: function create() {
			t = text(t_value);
		},
		l: function claim(nodes) {
			t = claim_text(nodes, t_value);
		},
		m: function mount(target, anchor) {
			insert_hydration_dev(target, t, anchor);
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_2.name,
		type: "if",
		source: "(74:2) {#if loadingIncident}",
		ctx
	});

	return block;
}

// (87:2) {:else}
function create_else_block(ctx) {
	let div1;
	let dl;
	let dt;
	let t0_value = config.i18n.incidentOpenedAt + "";
	let t0;
	let dd;
	let t1_value = new Date(/*incident*/ ctx[4].created_at).toLocaleString() + "";
	let t1;
	let t2;
	let div0;
	let p0;
	let a0;
	let t3_value = config.i18n.incidentSubscribe + "";
	let t3;
	let a0_href_value;
	let t4;
	let p1;
	let a1;
	let t5_value = config.i18n.incidentViewOnGitHub + "";
	let t5;
	let a1_href_value;
	let t6;
	let each_1_anchor;
	let if_block = /*incident*/ ctx[4].closed_at && create_if_block_1(ctx);
	let each_value = /*comments*/ ctx[3];
	validate_each_argument(each_value);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	const block = {
		c: function create() {
			div1 = element("div");
			dl = element("dl");
			dt = element("dt");
			t0 = text(t0_value);
			dd = element("dd");
			t1 = text(t1_value);
			if (if_block) if_block.c();
			t2 = space();
			div0 = element("div");
			p0 = element("p");
			a0 = element("a");
			t3 = text(t3_value);
			t4 = space();
			p1 = element("p");
			a1 = element("a");
			t5 = text(t5_value);
			t6 = space();

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			each_1_anchor = empty();
			this.h();
		},
		l: function claim(nodes) {
			div1 = claim_element(nodes, "DIV", { class: true });
			var div1_nodes = children(div1);
			dl = claim_element(div1_nodes, "DL", {});
			var dl_nodes = children(dl);
			dt = claim_element(dl_nodes, "DT", {});
			var dt_nodes = children(dt);
			t0 = claim_text(dt_nodes, t0_value);
			dt_nodes.forEach(detach_dev);
			dd = claim_element(dl_nodes, "DD", {});
			var dd_nodes = children(dd);
			t1 = claim_text(dd_nodes, t1_value);
			dd_nodes.forEach(detach_dev);
			if (if_block) if_block.l(dl_nodes);
			dl_nodes.forEach(detach_dev);
			t2 = claim_space(div1_nodes);
			div0 = claim_element(div1_nodes, "DIV", { class: true });
			var div0_nodes = children(div0);
			p0 = claim_element(div0_nodes, "P", { class: true });
			var p0_nodes = children(p0);
			a0 = claim_element(p0_nodes, "A", { href: true });
			var a0_nodes = children(a0);
			t3 = claim_text(a0_nodes, t3_value);
			a0_nodes.forEach(detach_dev);
			p0_nodes.forEach(detach_dev);
			t4 = claim_space(div0_nodes);
			p1 = claim_element(div0_nodes, "P", { class: true });
			var p1_nodes = children(p1);
			a1 = claim_element(p1_nodes, "A", { href: true });
			var a1_nodes = children(a1);
			t5 = claim_text(a1_nodes, t5_value);
			a1_nodes.forEach(detach_dev);
			p1_nodes.forEach(detach_dev);
			div0_nodes.forEach(detach_dev);
			div1_nodes.forEach(detach_dev);
			t6 = claim_space(nodes);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(nodes);
			}

			each_1_anchor = empty();
			this.h();
		},
		h: function hydrate() {
			add_location(dt, file, 89, 8, 1866);
			add_location(dd, file, 90, 8, 1914);
			add_location(dl, file, 88, 6, 1853);
			attr_dev(a0, "href", a0_href_value = `https://github.com/${config.owner}/${config.repo}/issues/${/*number*/ ctx[0]}`);
			add_location(a0, file, 98, 10, 2192);
			attr_dev(p0, "class", "svelte-4o16l6");
			add_location(p0, file, 97, 8, 2178);
			attr_dev(a1, "href", a1_href_value = `https://github.com/${config.owner}/${config.repo}/issues/${/*number*/ ctx[0]}`);
			add_location(a1, file, 103, 10, 2366);
			attr_dev(p1, "class", "svelte-4o16l6");
			add_location(p1, file, 102, 8, 2352);
			attr_dev(div0, "class", "r svelte-4o16l6");
			add_location(div0, file, 96, 6, 2154);
			attr_dev(div1, "class", "f");
			add_location(div1, file, 87, 4, 1831);
		},
		m: function mount(target, anchor) {
			insert_hydration_dev(target, div1, anchor);
			append_hydration_dev(div1, dl);
			append_hydration_dev(dl, dt);
			append_hydration_dev(dt, t0);
			append_hydration_dev(dl, dd);
			append_hydration_dev(dd, t1);
			if (if_block) if_block.m(dl, null);
			append_hydration_dev(div1, t2);
			append_hydration_dev(div1, div0);
			append_hydration_dev(div0, p0);
			append_hydration_dev(p0, a0);
			append_hydration_dev(a0, t3);
			append_hydration_dev(div0, t4);
			append_hydration_dev(div0, p1);
			append_hydration_dev(p1, a1);
			append_hydration_dev(a1, t5);
			insert_hydration_dev(target, t6, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(target, anchor);
			}

			insert_hydration_dev(target, each_1_anchor, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*incident*/ 16 && t1_value !== (t1_value = new Date(/*incident*/ ctx[4].created_at).toLocaleString() + "")) set_data_dev(t1, t1_value);

			if (/*incident*/ ctx[4].closed_at) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block_1(ctx);
					if_block.c();
					if_block.m(dl, null);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}

			if (dirty & /*number*/ 1 && a0_href_value !== (a0_href_value = `https://github.com/${config.owner}/${config.repo}/issues/${/*number*/ ctx[0]}`)) {
				attr_dev(a0, "href", a0_href_value);
			}

			if (dirty & /*number*/ 1 && a1_href_value !== (a1_href_value = `https://github.com/${config.owner}/${config.repo}/issues/${/*number*/ ctx[0]}`)) {
				attr_dev(a1, "href", a1_href_value);
			}

			if (dirty & /*config, comments, Date, md*/ 40) {
				each_value = /*comments*/ ctx[3];
				validate_each_argument(each_value);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(div1);
			if (if_block) if_block.d();
			if (detaching) detach_dev(t6);
			destroy_each(each_blocks, detaching);
			if (detaching) detach_dev(each_1_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block.name,
		type: "else",
		source: "(87:2) {:else}",
		ctx
	});

	return block;
}

// (85:2) {#if loading}
function create_if_block(ctx) {
	let loading_1;
	let current;
	loading_1 = new Loading({ $$inline: true });

	const block = {
		c: function create() {
			create_component(loading_1.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(loading_1.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(loading_1, target, anchor);
			current = true;
		},
		p: noop,
		i: function intro(local) {
			if (current) return;
			transition_in(loading_1.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(loading_1.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(loading_1, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block.name,
		type: "if",
		source: "(85:2) {#if loading}",
		ctx
	});

	return block;
}

// (92:8) {#if incident.closed_at}
function create_if_block_1(ctx) {
	let dt;
	let t0_value = config.i18n.incidentClosedAt + "";
	let t0;
	let dd;
	let t1_value = new Date(/*incident*/ ctx[4].closed_at).toLocaleString() + "";
	let t1;

	const block = {
		c: function create() {
			dt = element("dt");
			t0 = text(t0_value);
			dd = element("dd");
			t1 = text(t1_value);
			this.h();
		},
		l: function claim(nodes) {
			dt = claim_element(nodes, "DT", {});
			var dt_nodes = children(dt);
			t0 = claim_text(dt_nodes, t0_value);
			dt_nodes.forEach(detach_dev);
			dd = claim_element(nodes, "DD", {});
			var dd_nodes = children(dd);
			t1 = claim_text(dd_nodes, t1_value);
			dd_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			add_location(dt, file, 92, 10, 2015);
			add_location(dd, file, 93, 10, 2065);
		},
		m: function mount(target, anchor) {
			insert_hydration_dev(target, dt, anchor);
			append_hydration_dev(dt, t0);
			insert_hydration_dev(target, dd, anchor);
			append_hydration_dev(dd, t1);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*incident*/ 16 && t1_value !== (t1_value = new Date(/*incident*/ ctx[4].closed_at).toLocaleString() + "")) set_data_dev(t1, t1_value);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(dt);
			if (detaching) detach_dev(dd);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_1.name,
		type: "if",
		source: "(92:8) {#if incident.closed_at}",
		ctx
	});

	return block;
}

// (110:4) {#each comments as comment}
function create_each_block(ctx) {
	let article;
	let p;
	let raw0_value = /*md*/ ctx[5](/*comment*/ ctx[9].body) + "";
	let t0;
	let div;
	let raw1_value = config.i18n.incidentCommentSummary.replace(/\$DATE/, `<a href=${/*comment*/ ctx[9].html_url}>${new Date(/*comment*/ ctx[9].created_at).toLocaleString()}</a>`).replace(/\$AUTHOR/, `<a href=${/*comment*/ ctx[9].user.html_url}>@${/*comment*/ ctx[9].user.login}</a>`) + "";
	let t1;

	const block = {
		c: function create() {
			article = element("article");
			p = element("p");
			t0 = space();
			div = element("div");
			t1 = space();
			this.h();
		},
		l: function claim(nodes) {
			article = claim_element(nodes, "ARTICLE", {});
			var article_nodes = children(article);
			p = claim_element(article_nodes, "P", { class: true });
			var p_nodes = children(p);
			p_nodes.forEach(detach_dev);
			t0 = claim_space(article_nodes);
			div = claim_element(article_nodes, "DIV", {});
			var div_nodes = children(div);
			div_nodes.forEach(detach_dev);
			t1 = claim_space(article_nodes);
			article_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(p, "class", "svelte-4o16l6");
			add_location(p, file, 111, 8, 2601);
			add_location(div, file, 114, 8, 2661);
			add_location(article, file, 110, 6, 2583);
		},
		m: function mount(target, anchor) {
			insert_hydration_dev(target, article, anchor);
			append_hydration_dev(article, p);
			p.innerHTML = raw0_value;
			append_hydration_dev(article, t0);
			append_hydration_dev(article, div);
			div.innerHTML = raw1_value;
			append_hydration_dev(article, t1);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*comments*/ 8 && raw0_value !== (raw0_value = /*md*/ ctx[5](/*comment*/ ctx[9].body) + "")) p.innerHTML = raw0_value;			if (dirty & /*comments*/ 8 && raw1_value !== (raw1_value = config.i18n.incidentCommentSummary.replace(/\$DATE/, `<a href=${/*comment*/ ctx[9].html_url}>${new Date(/*comment*/ ctx[9].created_at).toLocaleString()}</a>`).replace(/\$AUTHOR/, `<a href=${/*comment*/ ctx[9].user.html_url}>@${/*comment*/ ctx[9].user.login}</a>`) + "")) div.innerHTML = raw1_value;		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(article);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block.name,
		type: "each",
		source: "(110:4) {#each comments as comment}",
		ctx
	});

	return block;
}

function create_fragment$1(ctx) {
	let title_value;
	let t0;
	let h2;
	let t1;
	let section;
	let current_block_type_index;
	let if_block1;
	let t2;
	let footer;
	let a;
	let t3_value = config.i18n.incidentBack + "";
	let t3;
	let current;
	document.title = title_value = config.i18n.incidentTitle.replace('$NUMBER', /*number*/ ctx[0]);

	function select_block_type(ctx, dirty) {
		if (/*loadingIncident*/ ctx[2]) return create_if_block_2;
		return create_else_block_1;
	}

	let current_block_type = select_block_type(ctx);
	let if_block0 = current_block_type(ctx);
	const if_block_creators = [create_if_block, create_else_block];
	const if_blocks = [];

	function select_block_type_1(ctx, dirty) {
		if (/*loading*/ ctx[1]) return 0;
		return 1;
	}

	current_block_type_index = select_block_type_1(ctx);
	if_block1 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	const block = {
		c: function create() {
			t0 = space();
			h2 = element("h2");
			if_block0.c();
			t1 = space();
			section = element("section");
			if_block1.c();
			t2 = space();
			footer = element("footer");
			a = element("a");
			t3 = text(t3_value);
			this.h();
		},
		l: function claim(nodes) {
			const head_nodes = query_selector_all('[data-svelte=\"svelte-1txp228\"]', document.head);
			head_nodes.forEach(detach_dev);
			t0 = claim_space(nodes);
			h2 = claim_element(nodes, "H2", { class: true });
			var h2_nodes = children(h2);
			if_block0.l(h2_nodes);
			h2_nodes.forEach(detach_dev);
			t1 = claim_space(nodes);
			section = claim_element(nodes, "SECTION", {});
			var section_nodes = children(section);
			if_block1.l(section_nodes);
			section_nodes.forEach(detach_dev);
			t2 = claim_space(nodes);
			footer = claim_element(nodes, "FOOTER", { class: true });
			var footer_nodes = children(footer);
			a = claim_element(footer_nodes, "A", { href: true });
			var a_nodes = children(a);
			t3 = claim_text(a_nodes, t3_value);
			a_nodes.forEach(detach_dev);
			footer_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(h2, "class", "svelte-4o16l6");
			add_location(h2, file, 72, 0, 1517);
			add_location(section, file, 83, 0, 1775);
			attr_dev(a, "href", config.path);
			add_location(a, file, 127, 8, 3045);
			attr_dev(footer, "class", "svelte-4o16l6");
			add_location(footer, file, 127, 0, 3037);
		},
		m: function mount(target, anchor) {
			insert_hydration_dev(target, t0, anchor);
			insert_hydration_dev(target, h2, anchor);
			if_block0.m(h2, null);
			insert_hydration_dev(target, t1, anchor);
			insert_hydration_dev(target, section, anchor);
			if_blocks[current_block_type_index].m(section, null);
			insert_hydration_dev(target, t2, anchor);
			insert_hydration_dev(target, footer, anchor);
			append_hydration_dev(footer, a);
			append_hydration_dev(a, t3);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			if ((!current || dirty & /*config, number*/ 1) && title_value !== (title_value = config.i18n.incidentTitle.replace('$NUMBER', /*number*/ ctx[0]))) {
				document.title = title_value;
			}

			if (current_block_type === (current_block_type = select_block_type(ctx)) && if_block0) {
				if_block0.p(ctx, dirty);
			} else {
				if_block0.d(1);
				if_block0 = current_block_type(ctx);

				if (if_block0) {
					if_block0.c();
					if_block0.m(h2, null);
				}
			}

			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type_1(ctx);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block1 = if_blocks[current_block_type_index];

				if (!if_block1) {
					if_block1 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block1.c();
				} else {
					if_block1.p(ctx, dirty);
				}

				transition_in(if_block1, 1);
				if_block1.m(section, null);
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(if_block1);
			current = true;
		},
		o: function outro(local) {
			transition_out(if_block1);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t0);
			if (detaching) detach_dev(h2);
			if_block0.d();
			if (detaching) detach_dev(t1);
			if (detaching) detach_dev(section);
			if_blocks[current_block_type_index].d();
			if (detaching) detach_dev(t2);
			if (detaching) detach_dev(footer);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$1.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$1($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('Incident', slots, []);
	let { number } = $$props;
	let md = t;
	let loading = true;
	let loadingIncident = true;
	const octokit = createOctokit();
	const owner = config.owner;
	const repo = config.repo;
	let comments = [];
	let incident = {};

	onMount(async () => {
		try {
			$$invalidate(4, incident = (await cachedResponse(`issue-${owner}-${repo}-${number}`, () => octokit.issues.get({
				owner,
				repo,
				issue_number: number,
				sort: "created",
				direction: "desc"
			}))).data);
		} catch(error) {
			handleError(error);
		}

		$$invalidate(2, loadingIncident = false);

		try {
			$$invalidate(3, comments = (await cachedResponse(`issue-comments-${owner}-${repo}-${number}`, () => octokit.issues.listComments({ owner, repo, issue_number: number }))).data.reverse());
		} catch(error) {
			handleError(error);
		}

		$$invalidate(1, loading = false);
	});

	const writable_props = ['number'];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Incident> was created with unknown prop '${key}'`);
	});

	$$self.$$set = $$props => {
		if ('number' in $$props) $$invalidate(0, number = $$props.number);
	};

	$$self.$capture_state = () => ({
		Loading,
		onMount,
		snarkdown: t,
		config,
		cachedResponse,
		createOctokit,
		handleError,
		number,
		md,
		loading,
		loadingIncident,
		octokit,
		owner,
		repo,
		comments,
		incident
	});

	$$self.$inject_state = $$props => {
		if ('number' in $$props) $$invalidate(0, number = $$props.number);
		if ('md' in $$props) $$invalidate(5, md = $$props.md);
		if ('loading' in $$props) $$invalidate(1, loading = $$props.loading);
		if ('loadingIncident' in $$props) $$invalidate(2, loadingIncident = $$props.loadingIncident);
		if ('comments' in $$props) $$invalidate(3, comments = $$props.comments);
		if ('incident' in $$props) $$invalidate(4, incident = $$props.incident);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [number, loading, loadingIncident, comments, incident, md];
}

class Incident extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$1, create_fragment$1, safe_not_equal, { number: 0 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Incident",
			options,
			id: create_fragment$1.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*number*/ ctx[0] === undefined && !('number' in props)) {
			console.warn("<Incident> was created without expected prop 'number'");
		}
	}

	get number() {
		throw new Error("<Incident>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set number(value) {
		throw new Error("<Incident>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* src/routes/incident/[number].svelte generated by Svelte v3.43.2 */

function create_fragment(ctx) {
	let incident;
	let current;

	incident = new Incident({
			props: { number: /*number*/ ctx[0] },
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(incident.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(incident.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(incident, target, anchor);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			const incident_changes = {};
			if (dirty & /*number*/ 1) incident_changes.number = /*number*/ ctx[0];
			incident.$set(incident_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(incident.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(incident.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(incident, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

async function preload(page) {
	const { number } = page.params;
	return { number };
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('U5Bnumberu5D', slots, []);
	let { number } = $$props;
	const writable_props = ['number'];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<U5Bnumberu5D> was created with unknown prop '${key}'`);
	});

	$$self.$$set = $$props => {
		if ('number' in $$props) $$invalidate(0, number = $$props.number);
	};

	$$self.$capture_state = () => ({ preload, Incident, number });

	$$self.$inject_state = $$props => {
		if ('number' in $$props) $$invalidate(0, number = $$props.number);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [number];
}

class U5Bnumberu5D extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, { number: 0 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "U5Bnumberu5D",
			options,
			id: create_fragment.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*number*/ ctx[0] === undefined && !('number' in props)) {
			console.warn("<U5Bnumberu5D> was created without expected prop 'number'");
		}
	}

	get number() {
		throw new Error("<U5Bnumberu5D>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set number(value) {
		throw new Error("<U5Bnumberu5D>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

export { U5Bnumberu5D as default, preload };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
