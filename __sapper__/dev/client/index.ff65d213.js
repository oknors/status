import { S as SvelteComponentDev, i as init, s as safe_not_equal, d as dispatch_dev, v as validate_slots, c as config, o as onMount, e as element, t as text, a as claim_element, b as children, f as claim_text, g as detach_dev, h as attr_dev, j as add_location, k as insert_hydration_dev, l as append_hydration_dev, n as noop, m as space, p as claim_space, q as group_outros, r as transition_out, u as check_outros, w as transition_in, x as validate_each_argument, y as set_data_dev, z as empty, A as destroy_each, B as create_component, C as claim_component, D as mount_component, E as destroy_component, F as listen_dev, G as run_all, H as binding_callbacks, I as HtmlTagHydration, J as claim_html_tag, K as src_url_equal, L as null_to_empty, M as t, N as query_selector_all } from './client.69e7c0f4.js';
import { c as createOctokit, a as cachedResponse, h as handleError, L as Loading } from './createOctokit.15be5dc3.js';

/* src/components/ActiveIncidents.svelte generated by Svelte v3.43.2 */

const file$3 = "src/components/ActiveIncidents.svelte";

function get_each_context$2(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[5] = list[i];
	return child_ctx;
}

// (61:0) {#if !incidents.length && !loading}
function create_if_block_2$2(ctx) {
	let article;
	let t0;
	let t1_value = config.i18n.allSystemsOperational + "";
	let t1;

	const block = {
		c: function create() {
			article = element("article");
			t0 = text("✅   ");
			t1 = text(t1_value);
			this.h();
		},
		l: function claim(nodes) {
			article = claim_element(nodes, "ARTICLE", { class: true });
			var article_nodes = children(article);
			t0 = claim_text(article_nodes, "✅   ");
			t1 = claim_text(article_nodes, t1_value);
			article_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(article, "class", "good svelte-1uadwzk");
			add_location(article, file$3, 61, 2, 1455);
		},
		m: function mount(target, anchor) {
			insert_hydration_dev(target, article, anchor);
			append_hydration_dev(article, t0);
			append_hydration_dev(article, t1);
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(article);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_2$2.name,
		type: "if",
		source: "(61:0) {#if !incidents.length && !loading}",
		ctx
	});

	return block;
}

// (68:29) 
function create_if_block_1$3(ctx) {
	let h2;
	let t0_value = config.i18n.activeIncidents + "";
	let t0;
	let t1;
	let each_1_anchor;
	let each_value = /*incidents*/ ctx[1];
	validate_each_argument(each_value);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block$2(get_each_context$2(ctx, each_value, i));
	}

	const block = {
		c: function create() {
			h2 = element("h2");
			t0 = text(t0_value);
			t1 = space();

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			each_1_anchor = empty();
			this.h();
		},
		l: function claim(nodes) {
			h2 = claim_element(nodes, "H2", {});
			var h2_nodes = children(h2);
			t0 = claim_text(h2_nodes, t0_value);
			h2_nodes.forEach(detach_dev);
			t1 = claim_space(nodes);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(nodes);
			}

			each_1_anchor = empty();
			this.h();
		},
		h: function hydrate() {
			add_location(h2, file$3, 68, 4, 1615);
		},
		m: function mount(target, anchor) {
			insert_hydration_dev(target, h2, anchor);
			append_hydration_dev(h2, t0);
			insert_hydration_dev(target, t1, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(target, anchor);
			}

			insert_hydration_dev(target, each_1_anchor, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*incidents, config, Date*/ 2) {
				each_value = /*incidents*/ ctx[1];
				validate_each_argument(each_value);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context$2(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block$2(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(h2);
			if (detaching) detach_dev(t1);
			destroy_each(each_blocks, detaching);
			if (detaching) detach_dev(each_1_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_1$3.name,
		type: "if",
		source: "(68:29) ",
		ctx
	});

	return block;
}

// (66:2) {#if loading}
function create_if_block$3(ctx) {
	let loading_1;
	let current;
	loading_1 = new Loading({ $$inline: true });

	const block = {
		c: function create() {
			create_component(loading_1.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(loading_1.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(loading_1, target, anchor);
			current = true;
		},
		p: noop,
		i: function intro(local) {
			if (current) return;
			transition_in(loading_1.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(loading_1.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(loading_1, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block$3.name,
		type: "if",
		source: "(66:2) {#if loading}",
		ctx
	});

	return block;
}

// (70:4) {#each incidents as incident}
function create_each_block$2(ctx) {
	let article;
	let div3;
	let div1;
	let h4;
	let t0_value = /*incident*/ ctx[5].title.replace('🛑', '').replace('⚠️', '').trim() + "";
	let t0;
	let t1;
	let div0;
	let t2_value = config.i18n.activeIncidentSummary.replace(/\$DATE/g, new Date(/*incident*/ ctx[5].created_at).toLocaleString()).replace(/\$POSTS/g, /*incident*/ ctx[5].comments) + "";
	let t2;
	let t3;
	let div2;
	let a;
	let t4_value = config.i18n.incidentReport.replace(/\$NUMBER/g, /*incident*/ ctx[5].number) + "";
	let t4;
	let a_href_value;
	let t5;
	let article_class_value;

	const block = {
		c: function create() {
			article = element("article");
			div3 = element("div");
			div1 = element("div");
			h4 = element("h4");
			t0 = text(t0_value);
			t1 = space();
			div0 = element("div");
			t2 = text(t2_value);
			t3 = space();
			div2 = element("div");
			a = element("a");
			t4 = text(t4_value);
			t5 = space();
			this.h();
		},
		l: function claim(nodes) {
			article = claim_element(nodes, "ARTICLE", { class: true });
			var article_nodes = children(article);
			div3 = claim_element(article_nodes, "DIV", { class: true });
			var div3_nodes = children(div3);
			div1 = claim_element(div3_nodes, "DIV", {});
			var div1_nodes = children(div1);
			h4 = claim_element(div1_nodes, "H4", {});
			var h4_nodes = children(h4);
			t0 = claim_text(h4_nodes, t0_value);
			h4_nodes.forEach(detach_dev);
			t1 = claim_space(div1_nodes);
			div0 = claim_element(div1_nodes, "DIV", {});
			var div0_nodes = children(div0);
			t2 = claim_text(div0_nodes, t2_value);
			div0_nodes.forEach(detach_dev);
			div1_nodes.forEach(detach_dev);
			t3 = claim_space(div3_nodes);
			div2 = claim_element(div3_nodes, "DIV", { class: true });
			var div2_nodes = children(div2);
			a = claim_element(div2_nodes, "A", { href: true });
			var a_nodes = children(a);
			t4 = claim_text(a_nodes, t4_value);
			a_nodes.forEach(detach_dev);
			div2_nodes.forEach(detach_dev);
			div3_nodes.forEach(detach_dev);
			t5 = claim_space(article_nodes);
			article_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			add_location(h4, file$3, 73, 12, 1830);
			add_location(div0, file$3, 74, 12, 1911);
			add_location(div1, file$3, 72, 10, 1812);
			attr_dev(a, "href", a_href_value = `${config.path}/incident/${/*incident*/ ctx[5].number}`);
			add_location(a, file$3, 81, 12, 2183);
			attr_dev(div2, "class", "f r");
			add_location(div2, file$3, 80, 10, 2153);
			attr_dev(div3, "class", "f");
			add_location(div3, file$3, 71, 8, 1786);

			attr_dev(article, "class", article_class_value = "down link " + (/*incident*/ ctx[5].title.includes('degraded')
			? 'degraded'
			: '') + " svelte-1uadwzk");

			add_location(article, file$3, 70, 6, 1694);
		},
		m: function mount(target, anchor) {
			insert_hydration_dev(target, article, anchor);
			append_hydration_dev(article, div3);
			append_hydration_dev(div3, div1);
			append_hydration_dev(div1, h4);
			append_hydration_dev(h4, t0);
			append_hydration_dev(div1, t1);
			append_hydration_dev(div1, div0);
			append_hydration_dev(div0, t2);
			append_hydration_dev(div3, t3);
			append_hydration_dev(div3, div2);
			append_hydration_dev(div2, a);
			append_hydration_dev(a, t4);
			append_hydration_dev(article, t5);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*incidents*/ 2 && t0_value !== (t0_value = /*incident*/ ctx[5].title.replace('🛑', '').replace('⚠️', '').trim() + "")) set_data_dev(t0, t0_value);
			if (dirty & /*incidents*/ 2 && t2_value !== (t2_value = config.i18n.activeIncidentSummary.replace(/\$DATE/g, new Date(/*incident*/ ctx[5].created_at).toLocaleString()).replace(/\$POSTS/g, /*incident*/ ctx[5].comments) + "")) set_data_dev(t2, t2_value);
			if (dirty & /*incidents*/ 2 && t4_value !== (t4_value = config.i18n.incidentReport.replace(/\$NUMBER/g, /*incident*/ ctx[5].number) + "")) set_data_dev(t4, t4_value);

			if (dirty & /*incidents*/ 2 && a_href_value !== (a_href_value = `${config.path}/incident/${/*incident*/ ctx[5].number}`)) {
				attr_dev(a, "href", a_href_value);
			}

			if (dirty & /*incidents*/ 2 && article_class_value !== (article_class_value = "down link " + (/*incident*/ ctx[5].title.includes('degraded')
			? 'degraded'
			: '') + " svelte-1uadwzk")) {
				attr_dev(article, "class", article_class_value);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(article);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block$2.name,
		type: "each",
		source: "(70:4) {#each incidents as incident}",
		ctx
	});

	return block;
}

function create_fragment$3(ctx) {
	let t;
	let section;
	let current_block_type_index;
	let if_block1;
	let current;
	let if_block0 = !/*incidents*/ ctx[1].length && !/*loading*/ ctx[0] && create_if_block_2$2(ctx);
	const if_block_creators = [create_if_block$3, create_if_block_1$3];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (/*loading*/ ctx[0]) return 0;
		if (/*incidents*/ ctx[1].length) return 1;
		return -1;
	}

	if (~(current_block_type_index = select_block_type(ctx))) {
		if_block1 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
	}

	const block = {
		c: function create() {
			if (if_block0) if_block0.c();
			t = space();
			section = element("section");
			if (if_block1) if_block1.c();
			this.h();
		},
		l: function claim(nodes) {
			if (if_block0) if_block0.l(nodes);
			t = claim_space(nodes);
			section = claim_element(nodes, "SECTION", { class: true });
			var section_nodes = children(section);
			if (if_block1) if_block1.l(section_nodes);
			section_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(section, "class", "svelte-1uadwzk");
			add_location(section, file$3, 64, 0, 1539);
		},
		m: function mount(target, anchor) {
			if (if_block0) if_block0.m(target, anchor);
			insert_hydration_dev(target, t, anchor);
			insert_hydration_dev(target, section, anchor);

			if (~current_block_type_index) {
				if_blocks[current_block_type_index].m(section, null);
			}

			current = true;
		},
		p: function update(ctx, [dirty]) {
			if (!/*incidents*/ ctx[1].length && !/*loading*/ ctx[0]) {
				if (if_block0) {
					if_block0.p(ctx, dirty);
				} else {
					if_block0 = create_if_block_2$2(ctx);
					if_block0.c();
					if_block0.m(t.parentNode, t);
				}
			} else if (if_block0) {
				if_block0.d(1);
				if_block0 = null;
			}

			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx);

			if (current_block_type_index === previous_block_index) {
				if (~current_block_type_index) {
					if_blocks[current_block_type_index].p(ctx, dirty);
				}
			} else {
				if (if_block1) {
					group_outros();

					transition_out(if_blocks[previous_block_index], 1, 1, () => {
						if_blocks[previous_block_index] = null;
					});

					check_outros();
				}

				if (~current_block_type_index) {
					if_block1 = if_blocks[current_block_type_index];

					if (!if_block1) {
						if_block1 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
						if_block1.c();
					} else {
						if_block1.p(ctx, dirty);
					}

					transition_in(if_block1, 1);
					if_block1.m(section, null);
				} else {
					if_block1 = null;
				}
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(if_block1);
			current = true;
		},
		o: function outro(local) {
			transition_out(if_block1);
			current = false;
		},
		d: function destroy(detaching) {
			if (if_block0) if_block0.d(detaching);
			if (detaching) detach_dev(t);
			if (detaching) detach_dev(section);

			if (~current_block_type_index) {
				if_blocks[current_block_type_index].d();
			}
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$3.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$3($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('ActiveIncidents', slots, []);
	let loading = true;
	const octokit = createOctokit();
	const owner = config.owner;
	const repo = config.repo;
	let incidents = [];

	onMount(async () => {
		try {
			$$invalidate(1, incidents = (await cachedResponse(`issues-${owner}-${repo}`, () => octokit.issues.listForRepo({
				owner,
				repo,
				state: "open",
				filter: "all",
				sort: "created",
				direction: "desc",
				labels: "status"
			}))).data);

			$$invalidate(1, incidents = incidents.map((incident, index) => {
				incident.showHeading = index === 0 || new Date(incidents[index - 1].created_at).toLocaleDateString() !== new Date(incident.created_at).toLocaleDateString();
				return incident;
			}));
		} catch(error) {
			handleError(error);
		}

		$$invalidate(0, loading = false);
	});

	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<ActiveIncidents> was created with unknown prop '${key}'`);
	});

	$$self.$capture_state = () => ({
		Loading,
		onMount,
		config,
		cachedResponse,
		createOctokit,
		handleError,
		loading,
		octokit,
		owner,
		repo,
		incidents
	});

	$$self.$inject_state = $$props => {
		if ('loading' in $$props) $$invalidate(0, loading = $$props.loading);
		if ('incidents' in $$props) $$invalidate(1, incidents = $$props.incidents);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [loading, incidents];
}

class ActiveIncidents extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$3, create_fragment$3, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "ActiveIncidents",
			options,
			id: create_fragment$3.name
		});
	}
}

/* src/components/LiveStatus.svelte generated by Svelte v3.43.2 */
const file$2 = "src/components/LiveStatus.svelte";

function get_each_context$1(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[18] = list[i];
	return child_ctx;
}

// (133:25) 
function create_if_block_1$2(ctx) {
	let each_1_anchor;
	let each_value = /*sites*/ ctx[1];
	validate_each_argument(each_value);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block$1(get_each_context$1(ctx, each_value, i));
	}

	const block = {
		c: function create() {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			each_1_anchor = empty();
		},
		l: function claim(nodes) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(nodes);
			}

			each_1_anchor = empty();
		},
		m: function mount(target, anchor) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(target, anchor);
			}

			insert_hydration_dev(target, each_1_anchor, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*sites, graphsBaseUrl, selected, config*/ 26) {
				each_value = /*sites*/ ctx[1];
				validate_each_argument(each_value);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context$1(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block$1(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			destroy_each(each_blocks, detaching);
			if (detaching) detach_dev(each_1_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_1$2.name,
		type: "if",
		source: "(133:25) ",
		ctx
	});

	return block;
}

// (131:2) {#if loading}
function create_if_block$2(ctx) {
	let loading_1;
	let current;
	loading_1 = new Loading({ $$inline: true });

	const block = {
		c: function create() {
			create_component(loading_1.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(loading_1.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(loading_1, target, anchor);
			current = true;
		},
		p: noop,
		i: function intro(local) {
			if (current) return;
			transition_in(loading_1.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(loading_1.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(loading_1, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block$2.name,
		type: "if",
		source: "(131:2) {#if loading}",
		ctx
	});

	return block;
}

// (134:4) {#each sites as site}
function create_each_block$1(ctx) {
	let article;
	let h4;
	let img;
	let img_src_value;
	let t0;
	let a;
	let t1_value = /*site*/ ctx[18].name + "";
	let t1;
	let a_href_value;
	let t2;
	let div0;
	let html_tag;
	let raw0_value = config.i18n.overallUptime.split('$UPTIME')[0] + "";
	let t3;
	let span0;

	let t4_value = (/*selected*/ ctx[3] === 'day'
	? /*site*/ ctx[18].uptimeDay
	: /*selected*/ ctx[3] === 'week'
		? /*site*/ ctx[18].uptimeWeek
		: /*selected*/ ctx[3] === 'month'
			? /*site*/ ctx[18].uptimeMonth
			: /*selected*/ ctx[3] === 'year'
				? /*site*/ ctx[18].uptimeYear
				: /*site*/ ctx[18].uptime) + "";

	let t4;
	let t5;
	let html_tag_1;
	let raw1_value = config.i18n.overallUptime.split('$UPTIME')[1] + "";
	let t6;
	let div1;
	let html_tag_2;
	let raw2_value = config.i18n.averageResponseTime.split('$TIME')[0] + "";
	let t7;
	let span1;

	let t8_value = (/*selected*/ ctx[3] === 'day'
	? /*site*/ ctx[18].timeDay
	: /*selected*/ ctx[3] === 'week'
		? /*site*/ ctx[18].timeWeek
		: /*selected*/ ctx[3] === 'month'
			? /*site*/ ctx[18].timeMonth
			: /*selected*/ ctx[3] === 'year'
				? /*site*/ ctx[18].timeYear
				: /*site*/ ctx[18].time) + "";

	let t8;
	let t9;
	let html_tag_3;
	let raw3_value = config.i18n.averageResponseTime.split('$TIME')[1] + "";
	let t10;
	let article_class_value;
	let article_style_value;

	const block = {
		c: function create() {
			article = element("article");
			h4 = element("h4");
			img = element("img");
			t0 = space();
			a = element("a");
			t1 = text(t1_value);
			t2 = space();
			div0 = element("div");
			html_tag = new HtmlTagHydration();
			t3 = space();
			span0 = element("span");
			t4 = text(t4_value);
			t5 = space();
			html_tag_1 = new HtmlTagHydration();
			t6 = space();
			div1 = element("div");
			html_tag_2 = new HtmlTagHydration();
			t7 = space();
			span1 = element("span");
			t8 = text(t8_value);
			t9 = space();
			html_tag_3 = new HtmlTagHydration();
			t10 = space();
			this.h();
		},
		l: function claim(nodes) {
			article = claim_element(nodes, "ARTICLE", { class: true, style: true });
			var article_nodes = children(article);
			h4 = claim_element(article_nodes, "H4", {});
			var h4_nodes = children(h4);
			img = claim_element(h4_nodes, "IMG", { class: true, alt: true, src: true });
			t0 = claim_space(h4_nodes);
			a = claim_element(h4_nodes, "A", { href: true, class: true });
			var a_nodes = children(a);
			t1 = claim_text(a_nodes, t1_value);
			a_nodes.forEach(detach_dev);
			h4_nodes.forEach(detach_dev);
			t2 = claim_space(article_nodes);
			div0 = claim_element(article_nodes, "DIV", {});
			var div0_nodes = children(div0);
			html_tag = claim_html_tag(div0_nodes);
			t3 = claim_space(div0_nodes);
			span0 = claim_element(div0_nodes, "SPAN", { class: true });
			var span0_nodes = children(span0);
			t4 = claim_text(span0_nodes, t4_value);
			t5 = claim_space(span0_nodes);
			html_tag_1 = claim_html_tag(span0_nodes);
			span0_nodes.forEach(detach_dev);
			div0_nodes.forEach(detach_dev);
			t6 = claim_space(article_nodes);
			div1 = claim_element(article_nodes, "DIV", {});
			var div1_nodes = children(div1);
			html_tag_2 = claim_html_tag(div1_nodes);
			t7 = claim_space(div1_nodes);
			span1 = claim_element(div1_nodes, "SPAN", { class: true });
			var span1_nodes = children(span1);
			t8 = claim_text(span1_nodes, t8_value);
			t9 = claim_space(span1_nodes);
			html_tag_3 = claim_html_tag(span1_nodes);
			span1_nodes.forEach(detach_dev);
			div1_nodes.forEach(detach_dev);
			t10 = claim_space(article_nodes);
			article_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(img, "class", "icon svelte-uyma2x");
			attr_dev(img, "alt", "");
			if (!src_url_equal(img.src, img_src_value = /*site*/ ctx[18].icon)) attr_dev(img, "src", img_src_value);
			add_location(img, file$2, 138, 10, 3556);
			attr_dev(a, "href", a_href_value = `${config.path}/history/${/*site*/ ctx[18].slug}`);
			attr_dev(a, "class", "svelte-uyma2x");
			add_location(a, file$2, 139, 10, 3610);
			add_location(h4, file$2, 137, 8, 3541);
			html_tag.a = t3;
			html_tag_1.a = null;
			attr_dev(span0, "class", "data svelte-uyma2x");
			add_location(span0, file$2, 143, 10, 3776);
			add_location(div0, file$2, 141, 8, 3696);
			html_tag_2.a = t7;
			html_tag_3.a = null;
			attr_dev(span1, "class", "data svelte-uyma2x");
			add_location(span1, file$2, 149, 10, 4161);
			add_location(div1, file$2, 147, 8, 4077);
			attr_dev(article, "class", article_class_value = "" + (null_to_empty(`${/*site*/ ctx[18].status} link`) + " svelte-uyma2x"));

			attr_dev(article, "style", article_style_value = `background-image: url("${/*graphsBaseUrl*/ ctx[4]}/${/*site*/ ctx[18].slug}/response-time${/*selected*/ ctx[3] === 'day'
			? '-day'
			: /*selected*/ ctx[3] === 'week'
				? '-week'
				: /*selected*/ ctx[3] === 'month'
					? '-month'
					: /*selected*/ ctx[3] === 'year' ? '-year' : ''}.png`);

			add_location(article, file$2, 134, 6, 3263);
		},
		m: function mount(target, anchor) {
			insert_hydration_dev(target, article, anchor);
			append_hydration_dev(article, h4);
			append_hydration_dev(h4, img);
			append_hydration_dev(h4, t0);
			append_hydration_dev(h4, a);
			append_hydration_dev(a, t1);
			append_hydration_dev(article, t2);
			append_hydration_dev(article, div0);
			html_tag.m(raw0_value, div0);
			append_hydration_dev(div0, t3);
			append_hydration_dev(div0, span0);
			append_hydration_dev(span0, t4);
			append_hydration_dev(span0, t5);
			html_tag_1.m(raw1_value, span0);
			append_hydration_dev(article, t6);
			append_hydration_dev(article, div1);
			html_tag_2.m(raw2_value, div1);
			append_hydration_dev(div1, t7);
			append_hydration_dev(div1, span1);
			append_hydration_dev(span1, t8);
			append_hydration_dev(span1, t9);
			html_tag_3.m(raw3_value, span1);
			append_hydration_dev(article, t10);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*sites*/ 2 && !src_url_equal(img.src, img_src_value = /*site*/ ctx[18].icon)) {
				attr_dev(img, "src", img_src_value);
			}

			if (dirty & /*sites*/ 2 && t1_value !== (t1_value = /*site*/ ctx[18].name + "")) set_data_dev(t1, t1_value);

			if (dirty & /*sites*/ 2 && a_href_value !== (a_href_value = `${config.path}/history/${/*site*/ ctx[18].slug}`)) {
				attr_dev(a, "href", a_href_value);
			}

			if (dirty & /*selected, sites*/ 10 && t4_value !== (t4_value = (/*selected*/ ctx[3] === 'day'
			? /*site*/ ctx[18].uptimeDay
			: /*selected*/ ctx[3] === 'week'
				? /*site*/ ctx[18].uptimeWeek
				: /*selected*/ ctx[3] === 'month'
					? /*site*/ ctx[18].uptimeMonth
					: /*selected*/ ctx[3] === 'year'
						? /*site*/ ctx[18].uptimeYear
						: /*site*/ ctx[18].uptime) + "")) set_data_dev(t4, t4_value);

			if (dirty & /*selected, sites*/ 10 && t8_value !== (t8_value = (/*selected*/ ctx[3] === 'day'
			? /*site*/ ctx[18].timeDay
			: /*selected*/ ctx[3] === 'week'
				? /*site*/ ctx[18].timeWeek
				: /*selected*/ ctx[3] === 'month'
					? /*site*/ ctx[18].timeMonth
					: /*selected*/ ctx[3] === 'year'
						? /*site*/ ctx[18].timeYear
						: /*site*/ ctx[18].time) + "")) set_data_dev(t8, t8_value);

			if (dirty & /*sites*/ 2 && article_class_value !== (article_class_value = "" + (null_to_empty(`${/*site*/ ctx[18].status} link`) + " svelte-uyma2x"))) {
				attr_dev(article, "class", article_class_value);
			}

			if (dirty & /*sites, selected*/ 10 && article_style_value !== (article_style_value = `background-image: url("${/*graphsBaseUrl*/ ctx[4]}/${/*site*/ ctx[18].slug}/response-time${/*selected*/ ctx[3] === 'day'
			? '-day'
			: /*selected*/ ctx[3] === 'week'
				? '-week'
				: /*selected*/ ctx[3] === 'month'
					? '-month'
					: /*selected*/ ctx[3] === 'year' ? '-year' : ''}.png`)) {
				attr_dev(article, "style", article_style_value);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(article);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block$1.name,
		type: "each",
		source: "(134:4) {#each sites as site}",
		ctx
	});

	return block;
}

function create_fragment$2(ctx) {
	let div5;
	let h2;
	let t0_value = config.i18n.liveStatus + "";
	let t0;
	let t1;
	let form_1;
	let div0;
	let input0;
	let label0;
	let t2_value = (config.i18n.duration24H || '24h') + "";
	let t2;
	let t3;
	let div1;
	let input1;
	let label1;
	let t4_value = (config.i18n.duration7D || '7d') + "";
	let t4;
	let t5;
	let div2;
	let input2;
	let label2;
	let t6_value = (config.i18n.duration30D || '30d') + "";
	let t6;
	let t7;
	let div3;
	let input3;
	let label3;
	let t8_value = (config.i18n.duration1Y || '1y') + "";
	let t8;
	let t9;
	let div4;
	let input4;
	let label4;
	let t10_value = (config.i18n.durationAll || 'all') + "";
	let t10;
	let t11;
	let section;
	let current_block_type_index;
	let if_block;
	let current;
	let mounted;
	let dispose;
	const if_block_creators = [create_if_block$2, create_if_block_1$2];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (/*loading*/ ctx[0]) return 0;
		if (/*sites*/ ctx[1].length) return 1;
		return -1;
	}

	if (~(current_block_type_index = select_block_type(ctx))) {
		if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
	}

	const block = {
		c: function create() {
			div5 = element("div");
			h2 = element("h2");
			t0 = text(t0_value);
			t1 = space();
			form_1 = element("form");
			div0 = element("div");
			input0 = element("input");
			label0 = element("label");
			t2 = text(t2_value);
			t3 = space();
			div1 = element("div");
			input1 = element("input");
			label1 = element("label");
			t4 = text(t4_value);
			t5 = space();
			div2 = element("div");
			input2 = element("input");
			label2 = element("label");
			t6 = text(t6_value);
			t7 = space();
			div3 = element("div");
			input3 = element("input");
			label3 = element("label");
			t8 = text(t8_value);
			t9 = space();
			div4 = element("div");
			input4 = element("input");
			label4 = element("label");
			t10 = text(t10_value);
			t11 = space();
			section = element("section");
			if (if_block) if_block.c();
			this.h();
		},
		l: function claim(nodes) {
			div5 = claim_element(nodes, "DIV", { class: true });
			var div5_nodes = children(div5);
			h2 = claim_element(div5_nodes, "H2", {});
			var h2_nodes = children(h2);
			t0 = claim_text(h2_nodes, t0_value);
			h2_nodes.forEach(detach_dev);
			t1 = claim_space(div5_nodes);
			form_1 = claim_element(div5_nodes, "FORM", { class: true });
			var form_1_nodes = children(form_1);
			div0 = claim_element(form_1_nodes, "DIV", {});
			var div0_nodes = children(div0);

			input0 = claim_element(div0_nodes, "INPUT", {
				name: true,
				type: true,
				id: true,
				class: true
			});

			label0 = claim_element(div0_nodes, "LABEL", { for: true, class: true });
			var label0_nodes = children(label0);
			t2 = claim_text(label0_nodes, t2_value);
			label0_nodes.forEach(detach_dev);
			div0_nodes.forEach(detach_dev);
			t3 = claim_space(form_1_nodes);
			div1 = claim_element(form_1_nodes, "DIV", {});
			var div1_nodes = children(div1);

			input1 = claim_element(div1_nodes, "INPUT", {
				name: true,
				type: true,
				id: true,
				class: true
			});

			label1 = claim_element(div1_nodes, "LABEL", { for: true, class: true });
			var label1_nodes = children(label1);
			t4 = claim_text(label1_nodes, t4_value);
			label1_nodes.forEach(detach_dev);
			div1_nodes.forEach(detach_dev);
			t5 = claim_space(form_1_nodes);
			div2 = claim_element(form_1_nodes, "DIV", {});
			var div2_nodes = children(div2);

			input2 = claim_element(div2_nodes, "INPUT", {
				name: true,
				type: true,
				id: true,
				class: true
			});

			label2 = claim_element(div2_nodes, "LABEL", { for: true, class: true });
			var label2_nodes = children(label2);
			t6 = claim_text(label2_nodes, t6_value);
			label2_nodes.forEach(detach_dev);
			div2_nodes.forEach(detach_dev);
			t7 = claim_space(form_1_nodes);
			div3 = claim_element(form_1_nodes, "DIV", {});
			var div3_nodes = children(div3);

			input3 = claim_element(div3_nodes, "INPUT", {
				name: true,
				type: true,
				id: true,
				class: true
			});

			label3 = claim_element(div3_nodes, "LABEL", { for: true, class: true });
			var label3_nodes = children(label3);
			t8 = claim_text(label3_nodes, t8_value);
			label3_nodes.forEach(detach_dev);
			div3_nodes.forEach(detach_dev);
			t9 = claim_space(form_1_nodes);
			div4 = claim_element(form_1_nodes, "DIV", {});
			var div4_nodes = children(div4);

			input4 = claim_element(div4_nodes, "INPUT", {
				name: true,
				type: true,
				id: true,
				class: true
			});

			label4 = claim_element(div4_nodes, "LABEL", { for: true, class: true });
			var label4_nodes = children(label4);
			t10 = claim_text(label4_nodes, t10_value);
			label4_nodes.forEach(detach_dev);
			div4_nodes.forEach(detach_dev);
			form_1_nodes.forEach(detach_dev);
			div5_nodes.forEach(detach_dev);
			t11 = claim_space(nodes);
			section = claim_element(nodes, "SECTION", { class: true });
			var section_nodes = children(section);
			if (if_block) if_block.l(section_nodes);
			section_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			add_location(h2, file$2, 80, 2, 1888);
			input0.__value = "day";
			input0.value = input0.__value;
			attr_dev(input0, "name", "d");
			attr_dev(input0, "type", "radio");
			attr_dev(input0, "id", "data_day");
			attr_dev(input0, "class", "svelte-uyma2x");
			/*$$binding_groups*/ ctx[7][0].push(input0);
			add_location(input0, file$2, 83, 6, 1959);
			attr_dev(label0, "for", "data_day");
			attr_dev(label0, "class", "svelte-uyma2x");
			add_location(label0, file$2, 89, 24, 2106);
			add_location(div0, file$2, 82, 4, 1947);
			input1.__value = "week";
			input1.value = input1.__value;
			attr_dev(input1, "name", "d");
			attr_dev(input1, "type", "radio");
			attr_dev(input1, "id", "data_week");
			attr_dev(input1, "class", "svelte-uyma2x");
			/*$$binding_groups*/ ctx[7][0].push(input1);
			add_location(input1, file$2, 92, 6, 2198);
			attr_dev(label1, "for", "data_week");
			attr_dev(label1, "class", "svelte-uyma2x");
			add_location(label1, file$2, 98, 25, 2347);
			add_location(div1, file$2, 91, 4, 2186);
			input2.__value = "month";
			input2.value = input2.__value;
			attr_dev(input2, "name", "d");
			attr_dev(input2, "type", "radio");
			attr_dev(input2, "id", "data_month");
			attr_dev(input2, "class", "svelte-uyma2x");
			/*$$binding_groups*/ ctx[7][0].push(input2);
			add_location(input2, file$2, 101, 6, 2438);
			attr_dev(label2, "for", "data_month");
			attr_dev(label2, "class", "svelte-uyma2x");
			add_location(label2, file$2, 107, 26, 2589);
			add_location(div2, file$2, 100, 4, 2426);
			input3.__value = "year";
			input3.value = input3.__value;
			attr_dev(input3, "name", "d");
			attr_dev(input3, "type", "radio");
			attr_dev(input3, "id", "data_year");
			attr_dev(input3, "class", "svelte-uyma2x");
			/*$$binding_groups*/ ctx[7][0].push(input3);
			add_location(input3, file$2, 110, 6, 2683);
			attr_dev(label3, "for", "data_year");
			attr_dev(label3, "class", "svelte-uyma2x");
			add_location(label3, file$2, 116, 25, 2832);
			add_location(div3, file$2, 109, 4, 2671);
			input4.__value = "all";
			input4.value = input4.__value;
			attr_dev(input4, "name", "d");
			attr_dev(input4, "type", "radio");
			attr_dev(input4, "id", "data_all");
			attr_dev(input4, "class", "svelte-uyma2x");
			/*$$binding_groups*/ ctx[7][0].push(input4);
			add_location(input4, file$2, 119, 6, 2923);
			attr_dev(label4, "for", "data_all");
			attr_dev(label4, "class", "svelte-uyma2x");
			add_location(label4, file$2, 125, 24, 3070);
			add_location(div4, file$2, 118, 4, 2911);
			attr_dev(form_1, "class", "f r svelte-uyma2x");
			add_location(form_1, file$2, 81, 2, 1924);
			attr_dev(div5, "class", "f changed svelte-uyma2x");
			add_location(div5, file$2, 79, 0, 1845);
			attr_dev(section, "class", "svelte-uyma2x");
			add_location(section, file$2, 129, 0, 3163);
		},
		m: function mount(target, anchor) {
			insert_hydration_dev(target, div5, anchor);
			append_hydration_dev(div5, h2);
			append_hydration_dev(h2, t0);
			append_hydration_dev(div5, t1);
			append_hydration_dev(div5, form_1);
			append_hydration_dev(form_1, div0);
			append_hydration_dev(div0, input0);
			input0.checked = input0.__value === /*selected*/ ctx[3];
			append_hydration_dev(div0, label0);
			append_hydration_dev(label0, t2);
			append_hydration_dev(form_1, t3);
			append_hydration_dev(form_1, div1);
			append_hydration_dev(div1, input1);
			input1.checked = input1.__value === /*selected*/ ctx[3];
			append_hydration_dev(div1, label1);
			append_hydration_dev(label1, t4);
			append_hydration_dev(form_1, t5);
			append_hydration_dev(form_1, div2);
			append_hydration_dev(div2, input2);
			input2.checked = input2.__value === /*selected*/ ctx[3];
			append_hydration_dev(div2, label2);
			append_hydration_dev(label2, t6);
			append_hydration_dev(form_1, t7);
			append_hydration_dev(form_1, div3);
			append_hydration_dev(div3, input3);
			input3.checked = input3.__value === /*selected*/ ctx[3];
			append_hydration_dev(div3, label3);
			append_hydration_dev(label3, t8);
			append_hydration_dev(form_1, t9);
			append_hydration_dev(form_1, div4);
			append_hydration_dev(div4, input4);
			input4.checked = input4.__value === /*selected*/ ctx[3];
			append_hydration_dev(div4, label4);
			append_hydration_dev(label4, t10);
			/*div5_binding*/ ctx[12](div5);
			insert_hydration_dev(target, t11, anchor);
			insert_hydration_dev(target, section, anchor);

			if (~current_block_type_index) {
				if_blocks[current_block_type_index].m(section, null);
			}

			current = true;

			if (!mounted) {
				dispose = [
					listen_dev(input0, "change", /*input0_change_handler*/ ctx[6]),
					listen_dev(input0, "change", /*changed*/ ctx[5], false, false, false),
					listen_dev(input1, "change", /*input1_change_handler*/ ctx[8]),
					listen_dev(input1, "change", /*changed*/ ctx[5], false, false, false),
					listen_dev(input2, "change", /*input2_change_handler*/ ctx[9]),
					listen_dev(input2, "change", /*changed*/ ctx[5], false, false, false),
					listen_dev(input3, "change", /*input3_change_handler*/ ctx[10]),
					listen_dev(input3, "change", /*changed*/ ctx[5], false, false, false),
					listen_dev(input4, "change", /*input4_change_handler*/ ctx[11]),
					listen_dev(input4, "change", /*changed*/ ctx[5], false, false, false)
				];

				mounted = true;
			}
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*selected*/ 8) {
				input0.checked = input0.__value === /*selected*/ ctx[3];
			}

			if (dirty & /*selected*/ 8) {
				input1.checked = input1.__value === /*selected*/ ctx[3];
			}

			if (dirty & /*selected*/ 8) {
				input2.checked = input2.__value === /*selected*/ ctx[3];
			}

			if (dirty & /*selected*/ 8) {
				input3.checked = input3.__value === /*selected*/ ctx[3];
			}

			if (dirty & /*selected*/ 8) {
				input4.checked = input4.__value === /*selected*/ ctx[3];
			}

			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx);

			if (current_block_type_index === previous_block_index) {
				if (~current_block_type_index) {
					if_blocks[current_block_type_index].p(ctx, dirty);
				}
			} else {
				if (if_block) {
					group_outros();

					transition_out(if_blocks[previous_block_index], 1, 1, () => {
						if_blocks[previous_block_index] = null;
					});

					check_outros();
				}

				if (~current_block_type_index) {
					if_block = if_blocks[current_block_type_index];

					if (!if_block) {
						if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
						if_block.c();
					} else {
						if_block.p(ctx, dirty);
					}

					transition_in(if_block, 1);
					if_block.m(section, null);
				} else {
					if_block = null;
				}
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o: function outro(local) {
			transition_out(if_block);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div5);
			/*$$binding_groups*/ ctx[7][0].splice(/*$$binding_groups*/ ctx[7][0].indexOf(input0), 1);
			/*$$binding_groups*/ ctx[7][0].splice(/*$$binding_groups*/ ctx[7][0].indexOf(input1), 1);
			/*$$binding_groups*/ ctx[7][0].splice(/*$$binding_groups*/ ctx[7][0].indexOf(input2), 1);
			/*$$binding_groups*/ ctx[7][0].splice(/*$$binding_groups*/ ctx[7][0].indexOf(input3), 1);
			/*$$binding_groups*/ ctx[7][0].splice(/*$$binding_groups*/ ctx[7][0].indexOf(input4), 1);
			/*div5_binding*/ ctx[12](null);
			if (detaching) detach_dev(t11);
			if (detaching) detach_dev(section);

			if (~current_block_type_index) {
				if_blocks[current_block_type_index].d();
			}

			mounted = false;
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$2.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$2($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('LiveStatus', slots, []);
	let loading = true;
	const octokit = createOctokit();
	const owner = config.owner;
	const repo = config.repo;
	let { apiBaseUrl } = config["status-website"] || {};
	let sites = [];
	if (!apiBaseUrl) apiBaseUrl = "https://api.github.com";

	const userContentBaseUrl = apiBaseUrl.includes("api.github.com")
	? `https://raw.githubusercontent.com`
	: apiBaseUrl;

	const graphsBaseUrl = `${userContentBaseUrl}/${owner}/${repo}/master/graphs`;
	let form = null;
	let selected = "week";

	onMount(async () => {
		try {
			const res = await fetch(`${userContentBaseUrl}/${owner}/${repo}/master/history/summary.json`);
			$$invalidate(1, sites = await res.json());
		} catch(error) {
			handleError(error);
		}

		$$invalidate(0, loading = false);
		if (form) form.classList.remove("changed");
	});

	const changed = () => {
		if (form) {
			form.classList.add("changed");
			setTimeout(() => form.classList.remove("changed"), 500);
		}
	};

	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<LiveStatus> was created with unknown prop '${key}'`);
	});

	const $$binding_groups = [[]];

	function input0_change_handler() {
		selected = this.__value;
		$$invalidate(3, selected);
	}

	function input1_change_handler() {
		selected = this.__value;
		$$invalidate(3, selected);
	}

	function input2_change_handler() {
		selected = this.__value;
		$$invalidate(3, selected);
	}

	function input3_change_handler() {
		selected = this.__value;
		$$invalidate(3, selected);
	}

	function input4_change_handler() {
		selected = this.__value;
		$$invalidate(3, selected);
	}

	function div5_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			form = $$value;
			$$invalidate(2, form);
		});
	}

	$$self.$capture_state = () => ({
		Loading,
		onMount,
		config,
		createOctokit,
		handleError,
		loading,
		octokit,
		owner,
		repo,
		apiBaseUrl,
		sites,
		userContentBaseUrl,
		graphsBaseUrl,
		form,
		selected,
		changed
	});

	$$self.$inject_state = $$props => {
		if ('loading' in $$props) $$invalidate(0, loading = $$props.loading);
		if ('apiBaseUrl' in $$props) apiBaseUrl = $$props.apiBaseUrl;
		if ('sites' in $$props) $$invalidate(1, sites = $$props.sites);
		if ('form' in $$props) $$invalidate(2, form = $$props.form);
		if ('selected' in $$props) $$invalidate(3, selected = $$props.selected);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [
		loading,
		sites,
		form,
		selected,
		graphsBaseUrl,
		changed,
		input0_change_handler,
		$$binding_groups,
		input1_change_handler,
		input2_change_handler,
		input3_change_handler,
		input4_change_handler,
		div5_binding
	];
}

class LiveStatus extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$2, create_fragment$2, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "LiveStatus",
			options,
			id: create_fragment$2.name
		});
	}
}

/* src/components/Incidents.svelte generated by Svelte v3.43.2 */

const file$1 = "src/components/Incidents.svelte";

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[5] = list[i];
	return child_ctx;
}

// (51:29) 
function create_if_block_1$1(ctx) {
	let h2;
	let t0_value = config.i18n.pastIncidents + "";
	let t0;
	let t1;
	let each_1_anchor;
	let each_value = /*incidents*/ ctx[1];
	validate_each_argument(each_value);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	const block = {
		c: function create() {
			h2 = element("h2");
			t0 = text(t0_value);
			t1 = space();

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			each_1_anchor = empty();
			this.h();
		},
		l: function claim(nodes) {
			h2 = claim_element(nodes, "H2", { class: true });
			var h2_nodes = children(h2);
			t0 = claim_text(h2_nodes, t0_value);
			h2_nodes.forEach(detach_dev);
			t1 = claim_space(nodes);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(nodes);
			}

			each_1_anchor = empty();
			this.h();
		},
		h: function hydrate() {
			attr_dev(h2, "class", "svelte-18y4uo2");
			add_location(h2, file$1, 51, 4, 1243);
		},
		m: function mount(target, anchor) {
			insert_hydration_dev(target, h2, anchor);
			append_hydration_dev(h2, t0);
			insert_hydration_dev(target, t1, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(target, anchor);
			}

			insert_hydration_dev(target, each_1_anchor, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*incidents, config, Date*/ 2) {
				each_value = /*incidents*/ ctx[1];
				validate_each_argument(each_value);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(h2);
			if (detaching) detach_dev(t1);
			destroy_each(each_blocks, detaching);
			if (detaching) detach_dev(each_1_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_1$1.name,
		type: "if",
		source: "(51:29) ",
		ctx
	});

	return block;
}

// (49:2) {#if loading}
function create_if_block$1(ctx) {
	let loading_1;
	let current;
	loading_1 = new Loading({ $$inline: true });

	const block = {
		c: function create() {
			create_component(loading_1.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(loading_1.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(loading_1, target, anchor);
			current = true;
		},
		p: noop,
		i: function intro(local) {
			if (current) return;
			transition_in(loading_1.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(loading_1.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(loading_1, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block$1.name,
		type: "if",
		source: "(49:2) {#if loading}",
		ctx
	});

	return block;
}

// (54:6) {#if incident.showHeading}
function create_if_block_2$1(ctx) {
	let h3;
	let t_value = new Date(/*incident*/ ctx[5].created_at).toLocaleDateString() + "";
	let t;

	const block = {
		c: function create() {
			h3 = element("h3");
			t = text(t_value);
			this.h();
		},
		l: function claim(nodes) {
			h3 = claim_element(nodes, "H3", {});
			var h3_nodes = children(h3);
			t = claim_text(h3_nodes, t_value);
			h3_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			add_location(h3, file$1, 54, 8, 1355);
		},
		m: function mount(target, anchor) {
			insert_hydration_dev(target, h3, anchor);
			append_hydration_dev(h3, t);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*incidents*/ 2 && t_value !== (t_value = new Date(/*incident*/ ctx[5].created_at).toLocaleDateString() + "")) set_data_dev(t, t_value);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(h3);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_2$1.name,
		type: "if",
		source: "(54:6) {#if incident.showHeading}",
		ctx
	});

	return block;
}

// (53:4) {#each incidents as incident}
function create_each_block(ctx) {
	let t0;
	let article;
	let div3;
	let div1;
	let h4;
	let t1_value = /*incident*/ ctx[5].title.replace('🛑', '').replace('⚠️', '').trim() + "";
	let t1;
	let t2;
	let div0;
	let raw_value = config.i18n.pastIncidentsResolved.replace(/\$MINUTES/g, ((new Date(/*incident*/ ctx[5].closed_at).getTime() - new Date(/*incident*/ ctx[5].created_at).getTime()) / 60000).toFixed(0)).replace(/\$POSTS/g, /*incident*/ ctx[5].comments) + "";
	let t3;
	let div2;
	let a;
	let t4_value = config.i18n.incidentReport.replace(/\$NUMBER/g, /*incident*/ ctx[5].number) + "";
	let t4;
	let a_href_value;
	let t5;
	let article_class_value;
	let if_block = /*incident*/ ctx[5].showHeading && create_if_block_2$1(ctx);

	const block = {
		c: function create() {
			if (if_block) if_block.c();
			t0 = space();
			article = element("article");
			div3 = element("div");
			div1 = element("div");
			h4 = element("h4");
			t1 = text(t1_value);
			t2 = space();
			div0 = element("div");
			t3 = space();
			div2 = element("div");
			a = element("a");
			t4 = text(t4_value);
			t5 = space();
			this.h();
		},
		l: function claim(nodes) {
			if (if_block) if_block.l(nodes);
			t0 = claim_space(nodes);
			article = claim_element(nodes, "ARTICLE", { class: true });
			var article_nodes = children(article);
			div3 = claim_element(article_nodes, "DIV", { class: true });
			var div3_nodes = children(div3);
			div1 = claim_element(div3_nodes, "DIV", {});
			var div1_nodes = children(div1);
			h4 = claim_element(div1_nodes, "H4", {});
			var h4_nodes = children(h4);
			t1 = claim_text(h4_nodes, t1_value);
			h4_nodes.forEach(detach_dev);
			t2 = claim_space(div1_nodes);
			div0 = claim_element(div1_nodes, "DIV", {});
			var div0_nodes = children(div0);
			div0_nodes.forEach(detach_dev);
			div1_nodes.forEach(detach_dev);
			t3 = claim_space(div3_nodes);
			div2 = claim_element(div3_nodes, "DIV", { class: true });
			var div2_nodes = children(div2);
			a = claim_element(div2_nodes, "A", { href: true });
			var a_nodes = children(a);
			t4 = claim_text(a_nodes, t4_value);
			a_nodes.forEach(detach_dev);
			div2_nodes.forEach(detach_dev);
			div3_nodes.forEach(detach_dev);
			t5 = claim_space(article_nodes);
			article_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			add_location(h4, file$1, 59, 12, 1571);
			add_location(div0, file$1, 60, 12, 1652);
			add_location(div1, file$1, 58, 10, 1553);
			attr_dev(a, "href", a_href_value = `${config.path}/incident/${/*incident*/ ctx[5].number}`);
			add_location(a, file$1, 74, 12, 2126);
			attr_dev(div2, "class", "f r");
			add_location(div2, file$1, 73, 10, 2096);
			attr_dev(div3, "class", "f");
			add_location(div3, file$1, 57, 8, 1527);

			attr_dev(article, "class", article_class_value = "down link " + (/*incident*/ ctx[5].title.includes('degraded')
			? 'degraded'
			: ''));

			add_location(article, file$1, 56, 6, 1435);
		},
		m: function mount(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert_hydration_dev(target, t0, anchor);
			insert_hydration_dev(target, article, anchor);
			append_hydration_dev(article, div3);
			append_hydration_dev(div3, div1);
			append_hydration_dev(div1, h4);
			append_hydration_dev(h4, t1);
			append_hydration_dev(div1, t2);
			append_hydration_dev(div1, div0);
			div0.innerHTML = raw_value;
			append_hydration_dev(div3, t3);
			append_hydration_dev(div3, div2);
			append_hydration_dev(div2, a);
			append_hydration_dev(a, t4);
			append_hydration_dev(article, t5);
		},
		p: function update(ctx, dirty) {
			if (/*incident*/ ctx[5].showHeading) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block_2$1(ctx);
					if_block.c();
					if_block.m(t0.parentNode, t0);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}

			if (dirty & /*incidents*/ 2 && t1_value !== (t1_value = /*incident*/ ctx[5].title.replace('🛑', '').replace('⚠️', '').trim() + "")) set_data_dev(t1, t1_value);
			if (dirty & /*incidents*/ 2 && raw_value !== (raw_value = config.i18n.pastIncidentsResolved.replace(/\$MINUTES/g, ((new Date(/*incident*/ ctx[5].closed_at).getTime() - new Date(/*incident*/ ctx[5].created_at).getTime()) / 60000).toFixed(0)).replace(/\$POSTS/g, /*incident*/ ctx[5].comments) + "")) div0.innerHTML = raw_value;			if (dirty & /*incidents*/ 2 && t4_value !== (t4_value = config.i18n.incidentReport.replace(/\$NUMBER/g, /*incident*/ ctx[5].number) + "")) set_data_dev(t4, t4_value);

			if (dirty & /*incidents*/ 2 && a_href_value !== (a_href_value = `${config.path}/incident/${/*incident*/ ctx[5].number}`)) {
				attr_dev(a, "href", a_href_value);
			}

			if (dirty & /*incidents*/ 2 && article_class_value !== (article_class_value = "down link " + (/*incident*/ ctx[5].title.includes('degraded')
			? 'degraded'
			: ''))) {
				attr_dev(article, "class", article_class_value);
			}
		},
		d: function destroy(detaching) {
			if (if_block) if_block.d(detaching);
			if (detaching) detach_dev(t0);
			if (detaching) detach_dev(article);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block.name,
		type: "each",
		source: "(53:4) {#each incidents as incident}",
		ctx
	});

	return block;
}

function create_fragment$1(ctx) {
	let section;
	let current_block_type_index;
	let if_block;
	let current;
	const if_block_creators = [create_if_block$1, create_if_block_1$1];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (/*loading*/ ctx[0]) return 0;
		if (/*incidents*/ ctx[1].length) return 1;
		return -1;
	}

	if (~(current_block_type_index = select_block_type(ctx))) {
		if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
	}

	const block = {
		c: function create() {
			section = element("section");
			if (if_block) if_block.c();
			this.h();
		},
		l: function claim(nodes) {
			section = claim_element(nodes, "SECTION", {});
			var section_nodes = children(section);
			if (if_block) if_block.l(section_nodes);
			section_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			add_location(section, file$1, 47, 0, 1167);
		},
		m: function mount(target, anchor) {
			insert_hydration_dev(target, section, anchor);

			if (~current_block_type_index) {
				if_blocks[current_block_type_index].m(section, null);
			}

			current = true;
		},
		p: function update(ctx, [dirty]) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx);

			if (current_block_type_index === previous_block_index) {
				if (~current_block_type_index) {
					if_blocks[current_block_type_index].p(ctx, dirty);
				}
			} else {
				if (if_block) {
					group_outros();

					transition_out(if_blocks[previous_block_index], 1, 1, () => {
						if_blocks[previous_block_index] = null;
					});

					check_outros();
				}

				if (~current_block_type_index) {
					if_block = if_blocks[current_block_type_index];

					if (!if_block) {
						if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
						if_block.c();
					} else {
						if_block.p(ctx, dirty);
					}

					transition_in(if_block, 1);
					if_block.m(section, null);
				} else {
					if_block = null;
				}
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o: function outro(local) {
			transition_out(if_block);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(section);

			if (~current_block_type_index) {
				if_blocks[current_block_type_index].d();
			}
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$1.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$1($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('Incidents', slots, []);
	let loading = true;
	const octokit = createOctokit();
	const owner = config.owner;
	const repo = config.repo;
	let incidents = [];

	onMount(async () => {
		try {
			$$invalidate(1, incidents = (await cachedResponse(`closed-issues-${owner}-${repo}`, () => octokit.issues.listForRepo({
				owner,
				repo,
				state: "closed",
				filter: "all",
				sort: "created",
				direction: "desc",
				labels: "status"
			}))).data);
		} catch(error) {
			handleError(error);
		}

		$$invalidate(1, incidents = incidents.map((incident, index) => {
			incident.showHeading = index === 0 || new Date(incidents[index - 1].created_at).toLocaleDateString() !== new Date(incident.created_at).toLocaleDateString();
			return incident;
		}));

		$$invalidate(0, loading = false);
	});

	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Incidents> was created with unknown prop '${key}'`);
	});

	$$self.$capture_state = () => ({
		Loading,
		onMount,
		config,
		cachedResponse,
		createOctokit,
		handleError,
		loading,
		octokit,
		owner,
		repo,
		incidents
	});

	$$self.$inject_state = $$props => {
		if ('loading' in $$props) $$invalidate(0, loading = $$props.loading);
		if ('incidents' in $$props) $$invalidate(1, incidents = $$props.incidents);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [loading, incidents];
}

class Incidents extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$1, create_fragment$1, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Incidents",
			options,
			id: create_fragment$1.name
		});
	}
}

/* src/routes/index.svelte generated by Svelte v3.43.2 */
const file = "src/routes/index.svelte";

// (28:2) {#if config['status-website']}
function create_if_block(ctx) {
	let t;
	let if_block1_anchor;
	let if_block0 = config['status-website'].introTitle && create_if_block_2(ctx);
	let if_block1 = config['status-website'].introMessage && create_if_block_1(ctx);

	const block = {
		c: function create() {
			if (if_block0) if_block0.c();
			t = space();
			if (if_block1) if_block1.c();
			if_block1_anchor = empty();
		},
		l: function claim(nodes) {
			if (if_block0) if_block0.l(nodes);
			t = claim_space(nodes);
			if (if_block1) if_block1.l(nodes);
			if_block1_anchor = empty();
		},
		m: function mount(target, anchor) {
			if (if_block0) if_block0.m(target, anchor);
			insert_hydration_dev(target, t, anchor);
			if (if_block1) if_block1.m(target, anchor);
			insert_hydration_dev(target, if_block1_anchor, anchor);
		},
		p: function update(ctx, dirty) {
			if (config['status-website'].introTitle) if_block0.p(ctx, dirty);
			if (config['status-website'].introMessage) if_block1.p(ctx, dirty);
		},
		d: function destroy(detaching) {
			if (if_block0) if_block0.d(detaching);
			if (detaching) detach_dev(t);
			if (if_block1) if_block1.d(detaching);
			if (detaching) detach_dev(if_block1_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block.name,
		type: "if",
		source: "(28:2) {#if config['status-website']}",
		ctx
	});

	return block;
}

// (29:4) {#if config['status-website'].introTitle}
function create_if_block_2(ctx) {
	let h1;
	let raw_value = t(config['status-website'].introTitle) + "";

	const block = {
		c: function create() {
			h1 = element("h1");
			this.h();
		},
		l: function claim(nodes) {
			h1 = claim_element(nodes, "H1", {});
			var h1_nodes = children(h1);
			h1_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			add_location(h1, file, 29, 6, 629);
		},
		m: function mount(target, anchor) {
			insert_hydration_dev(target, h1, anchor);
			h1.innerHTML = raw_value;
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(h1);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_2.name,
		type: "if",
		source: "(29:4) {#if config['status-website'].introTitle}",
		ctx
	});

	return block;
}

// (34:4) {#if config['status-website'].introMessage}
function create_if_block_1(ctx) {
	let p;
	let raw_value = t(config['status-website'].introMessage) + "";

	const block = {
		c: function create() {
			p = element("p");
			this.h();
		},
		l: function claim(nodes) {
			p = claim_element(nodes, "P", { class: true });
			var p_nodes = children(p);
			p_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(p, "class", "lead svelte-ngkazm");
			add_location(p, file, 34, 6, 773);
		},
		m: function mount(target, anchor) {
			insert_hydration_dev(target, p, anchor);
			p.innerHTML = raw_value;
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(p);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_1.name,
		type: "if",
		source: "(34:4) {#if config['status-website'].introMessage}",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let title_value;
	let t0;
	let header;
	let t1;
	let activeincidents;
	let t2;
	let livestatus;
	let t3;
	let incidents;
	let current;
	document.title = title_value = /*title*/ ctx[0];
	let if_block = config['status-website'] && create_if_block(ctx);
	activeincidents = new ActiveIncidents({ $$inline: true });
	livestatus = new LiveStatus({ $$inline: true });
	incidents = new Incidents({ $$inline: true });

	const block = {
		c: function create() {
			t0 = space();
			header = element("header");
			if (if_block) if_block.c();
			t1 = space();
			create_component(activeincidents.$$.fragment);
			t2 = space();
			create_component(livestatus.$$.fragment);
			t3 = space();
			create_component(incidents.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			const head_nodes = query_selector_all('[data-svelte=\"svelte-1258swp\"]', document.head);
			head_nodes.forEach(detach_dev);
			t0 = claim_space(nodes);
			header = claim_element(nodes, "HEADER", { class: true });
			var header_nodes = children(header);
			if (if_block) if_block.l(header_nodes);
			header_nodes.forEach(detach_dev);
			t1 = claim_space(nodes);
			claim_component(activeincidents.$$.fragment, nodes);
			t2 = claim_space(nodes);
			claim_component(livestatus.$$.fragment, nodes);
			t3 = claim_space(nodes);
			claim_component(incidents.$$.fragment, nodes);
			this.h();
		},
		h: function hydrate() {
			attr_dev(header, "class", "svelte-ngkazm");
			add_location(header, file, 26, 0, 535);
		},
		m: function mount(target, anchor) {
			insert_hydration_dev(target, t0, anchor);
			insert_hydration_dev(target, header, anchor);
			if (if_block) if_block.m(header, null);
			insert_hydration_dev(target, t1, anchor);
			mount_component(activeincidents, target, anchor);
			insert_hydration_dev(target, t2, anchor);
			mount_component(livestatus, target, anchor);
			insert_hydration_dev(target, t3, anchor);
			mount_component(incidents, target, anchor);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			if ((!current || dirty & /*title*/ 1) && title_value !== (title_value = /*title*/ ctx[0])) {
				document.title = title_value;
			}

			if (config['status-website']) if_block.p(ctx, dirty);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(activeincidents.$$.fragment, local);
			transition_in(livestatus.$$.fragment, local);
			transition_in(incidents.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(activeincidents.$$.fragment, local);
			transition_out(livestatus.$$.fragment, local);
			transition_out(incidents.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t0);
			if (detaching) detach_dev(header);
			if (if_block) if_block.d();
			if (detaching) detach_dev(t1);
			destroy_component(activeincidents, detaching);
			if (detaching) detach_dev(t2);
			destroy_component(livestatus, detaching);
			if (detaching) detach_dev(t3);
			destroy_component(incidents, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('Routes', slots, []);
	let title = "Status";

	try {
		title = config["status-website"].name;
	} catch(error) {
		
	}

	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Routes> was created with unknown prop '${key}'`);
	});

	$$self.$capture_state = () => ({
		ActiveIncidents,
		LiveStatus,
		Incidents,
		config,
		snarkdown: t,
		title
	});

	$$self.$inject_state = $$props => {
		if ('title' in $$props) $$invalidate(0, title = $$props.title);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [title];
}

class Routes extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Routes",
			options,
			id: create_fragment.name
		});
	}
}

export { Routes as default };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
